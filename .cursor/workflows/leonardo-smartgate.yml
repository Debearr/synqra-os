name: leonardo-smartgate
version: 2.1.0
trigger:
  - manual
  - on_success(mcp-bridge)

inputs:
  project_id:
    type: string
    required: true
  prompt_text:
    type: string
    required: true
  min_word_threshold:
    type: integer
    default: 80

steps:
  - name: get_last_threshold
    action: supabase.query
    config:
      table: leonardo_thresholds
      filter:
        project_id: "{{ inputs.project_id }}"
      single: true
    outputs:
      last_data: result

  - name: count_words
    action: script.run
    config:
      language: javascript
      code: |
        const text = `{{ inputs.prompt_text }}`;
        const words = text.trim().split(/\s+/).length;
        return { word_count: words };
    outputs:
      word_analysis: result

  - name: decision_gate
    action: script.run
    config:
      language: javascript
      code: |
        const lastThreshold = {{ steps.get_last_threshold.last_data.min_word_threshold || inputs.min_word_threshold }};
        const count = {{ steps.count_words.word_analysis.word_count }};
        const proceed = count >= lastThreshold;
        const reason = proceed
          ? `✅ Proceed — ${count} words (≥ ${lastThreshold}).`
          : `❌ Skipped — ${count} words (< ${lastThreshold}).`;
        return { proceed, reason, used_threshold: lastThreshold };
    outputs:
      gate_result: result

  - name: conditional_generate
    condition: "{{ steps.decision_gate.gate_result.proceed }}"
    action: leonardo.generate
    config:
      model: "Leonardo Phoenix"
      prompt: "{{ inputs.prompt_text }}"
      width: 1792
      height: 1024
      guidance_scale: 7
      num_images: 1
    outputs:
      render_result: result

  - name: record_feedback
    action: supabase.insert
    config:
      table: leonardo_logs
      records:
        - project_id: "{{ inputs.project_id }}"
          word_count: "{{ steps.count_words.word_analysis.word_count }}"
          threshold: "{{ steps.decision_gate.gate_result.used_threshold }}"
          executed: "{{ steps.decision_gate.gate_result.proceed }}"
          decision_note: "{{ steps.decision_gate.gate_result.reason }}"
          created_at: "{{ now() }}"

  - name: update_threshold
    action: script.run
    config:
      language: javascript
      code: |
        const executed = {{ steps.decision_gate.gate_result.proceed }};
        const current = {{ steps.decision_gate.gate_result.used_threshold }};
        let newThreshold = current;

        if (!executed && current > 50) newThreshold -= 10; // too strict → loosen
        if (executed && current < 120) newThreshold += 5;  // successful → tighten a bit

        return { newThreshold };
    outputs:
      new_threshold_data: result

  - name: save_new_threshold
    action: supabase.upsert
    config:
      table: leonardo_thresholds
      records:
        - project_id: "{{ inputs.project_id }}"
          min_word_threshold: "{{ steps.update_threshold.new_threshold_data.newThreshold }}"
          updated_at: "{{ now() }}"

outputs:
  summary: "{{ steps.decision_gate.gate_result.reason }}"
  adaptive_threshold: "{{ steps.update_threshold.new_threshold_data.newThreshold }}"
  result: "{{ steps.conditional_generate.render_result }}"