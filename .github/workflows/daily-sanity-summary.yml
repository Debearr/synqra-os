name: Daily Sanity Summary (24h)

on:
  schedule:
    - cron: "0 14 * * *"  # Runs daily at 14:00 UTC (~10:00 ET). Adjust as needed.
  workflow_dispatch: {}

jobs:
  daily-summary:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Collect last 24h sanity-check stats
        id: collect
        uses: actions/github-script@v7
        with:
          script: |
            const workflowFile = "sanity-check.yml"; // If you renamed it, update here
            const since = new Date(Date.now() - 24 * 60 * 60 * 1000);

            // Get runs for the specific workflow
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workflowFile,
              per_page: 100
            });

            // Filter to last 24h
            const recent = runs.data.workflow_runs.filter(r => new Date(r.created_at) >= since);

            const total = recent.length;
            const success = recent.filter(r => r.conclusion === "success").length;
            const failure = recent.filter(r => r.conclusion === "failure").length;
            const cancelled = recent.filter(r => r.conclusion === "cancelled").length;

            // Average duration in minutes for completed runs
            function minutesBetween(a, b) {
              return Math.max(0, (new Date(b) - new Date(a)) / 60000);
            }
            const completed = recent.filter(r => r.status === "completed");
            const avgDuration =
              completed.length > 0
                ? (completed.reduce((acc, r) => acc + minutesBetween(r.created_at, r.updated_at), 0) / completed.length).toFixed(1)
                : "0.0";

            // Last 3 failures (if any)
            const lastFailures = recent
              .filter(r => r.conclusion === "failure")
              .slice(0, 3)
              .map(r => `‚Ä¢ ${r.head_branch} ‚Äî ${r.name} (#${r.run_number}) ‚Üí ${r.html_url}`)
              .join("\\n");

            core.setOutput("total", String(total));
            core.setOutput("success", String(success));
            core.setOutput("failure", String(failure));
            core.setOutput("cancelled", String(cancelled));
            core.setOutput("avgDuration", String(avgDuration));
            core.setOutput("lastFailures", lastFailures || "None in the last 24h.");
            core.setOutput("repo", `${context.repo.owner}/${context.repo.repo}`);

      - name: Post DAILY summary to Slack/Discord
        if: always()
        env:
          ALERT_WEBHOOK: ${{ secrets.ALERT_WEBHOOK }}
          REPO: ${{ steps.collect.outputs.repo }}
          TOTAL: ${{ steps.collect.outputs.total }}
          SUCCESS: ${{ steps.collect.outputs.success }}
          FAILURE: ${{ steps.collect.outputs.failure }}
          CANCELLED: ${{ steps.collect.outputs.cancelled }}
          AVG: ${{ steps.collect.outputs.avgDuration }}
          LASTFAILS: ${{ steps.collect.outputs.lastFailures }}
        run: |
          # Choose color: green if any success and no failure; red if any failure; grey otherwise
          if [ "$FAILURE" -gt 0 ]; then COLOR=15158332; TITLE="üö® Daily Sanity Summary ‚Äî FAILURES detected";
          elif [ "$SUCCESS" -gt 0 ]; then COLOR=3066993; TITLE="‚úÖ Daily Sanity Summary ‚Äî All good";
          else COLOR=9807270; TITLE="‚ÑπÔ∏è Daily Sanity Summary ‚Äî No runs";
          fi

          PAYLOAD=$(cat <<'JSON'
          {
            "username": "Synqra Bot",
            "avatar_url": "https://i.imgur.com/bL0x2qT.png",
            "embeds": [{
              "title": "TITLE_REPLACE",
              "description": "Repo: REPO_REPLACE",
              "color": COLOR_REPLACE,
              "fields": [
                {"name": "Total Runs (24h)", "value": "TOTAL_REPLACE", "inline": true},
                {"name": "Success", "value": "SUCCESS_REPLACE", "inline": true},
                {"name": "Failure", "value": "FAILURE_REPLACE", "inline": true},
                {"name": "Cancelled", "value": "CANCELLED_REPLACE", "inline": true},
                {"name": "Avg Duration (min)", "value": "AVG_REPLACE", "inline": true},
                {"name": "Last Failures", "value": "LASTFAILS_REPLACE"}
              ]
            }]
          }
          JSON
          )

          PAYLOAD="${PAYLOAD//TITLE_REPLACE/$TITLE}"
          PAYLOAD="${PAYLOAD//REPO_REPLACE/$REPO}"
          PAYLOAD="${PAYLOAD//COLOR_REPLACE/$COLOR}"
          PAYLOAD="${PAYLOAD//TOTAL_REPLACE/$TOTAL}"
          PAYLOAD="${PAYLOAD//SUCCESS_REPLACE/$SUCCESS}"
          PAYLOAD="${PAYLOAD//FAILURE_REPLACE/$FAILURE}"
          PAYLOAD="${PAYLOAD//CANCELLED_REPLACE/$CANCELLED}"
          PAYLOAD="${PAYLOAD//AVG_REPLACE/$AVG}"
          # escape newlines in LASTFAILS for JSON
          ESCAPED_LASTFAILS=$(echo "$LASTFAILS" | python3 -c 'import json,sys; print(json.dumps(sys.stdin.read())[1:-1])')
          PAYLOAD="${PAYLOAD//LASTFAILS_REPLACE/$ESCAPED_LASTFAILS}"

          curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$ALERT_WEBHOOK"

